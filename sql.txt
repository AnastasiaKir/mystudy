create database - создать бд
dropdatabase - удалить бд

Для создания бд через коммандную строку:

ssh ubuntu@138.2.136.191 - подключение к серверу mysql

sudo -i - становишься рутом

mysql -proot - зайти в mysql, залогиниться.

после создания бд
 show databases;
 use NameDB;

create table; - создать табл
auto_increment - столбец будет заполнятся автоматически на +1 (для id)
primery key (id) - записи в поле повторятся не будут

create table people( id int not null auto_increment, name varchar(30), email varchar(40), bio text, birth date, primary key(id) );

alter table name add имя поля varchar(32); - добавить в уже существующую табл. нужное поле

Хеш пароли обычно имеют 32 символа

поля  null - не сравниваются при вводе запросов. Пустота. Для поиска пустых значений, пример: select * from people where bio is null;
""- это пустая строка, но это значение.

null is null

union - соеденяет уникальные данные двух селектов. Повторяющихся данных в таблице не будет

union all - соеденяет данные двух селектов. При этом повторяющиеся данные в табл могут быть.

alias в where использовать нельзя

Только в блоке order by можно использовать alias столбца

where - накладывает ограничения на отбираемые данные

having - умеет формировать данные только уже с отобранных данных не используется без group by.


полная комманда запроса в бд -  select * from testdb.phone;
Тоесть необходимо ввести название бд после фром, если мы не перешли в нужную нам бд. С активной бд имя в запросе не используется.

Если название колонки имеет два слова записывать необходимо, пример `last name`

in (`mmm`, `dddd`) - используем когда нам необходимо перечислить значения в опреаторе where.

%A% - перед и после буквы любое кол-во символов
А%- после буквы любое кол-во символов
%А - слова которые заканчиваются на А

between - выбрать между. Оперрация включающаа.
select * from orders where shopId between 2 and 4; - покажет 2,3,4

ASC - данные по порядку
DESC - данные от большего к меньшему. используются с опреатором order by.

 


forum-db.informatik.uni-tuebingen.de/c/ss20-asql - вопросы/ответы по sql

alter table name drop column имя поля; - удалить не нужное поле с табл

ДОБАВЛЕНИЕ И УДАЛЕНИЕ ЗАПИСЕЙ В ТАБЛ:

insert into people (name, bio, birth, email) values('Alex', 'Just programer', '2050-04-04', 'testmail.ru');

alter table people change birth birth date not null - изменить значения поля в табл.

insert into people (name, birth) values('Bob', '2070-05-09'); -  добавить значения в табл.

множественное добавление элементов - 

insert into people (name, email, birth)
           values ('Bob', 'tcldchb1.com', '2062-02-06'),
                  ('Max', 'tcldchb3.com', '2060-02-08'),
                  ('Luk', 'tcldchb2.com', '2050-09-09');

обновить занчения в таблице в которой есть опред поле c данными:

update `people` set `name` = 'Ivan' where id = 2;

update `people` set `name` = 'Den', `email` = 'xhhnhxjs.com' where id > 4;


update `people` set `bio` = 'just new text' where name = 'Ivan' and id = 5;


create table test ( id int not null, sometext text, somefield varchar(36), primary key(id) );

delete from test where id = 2; - удалить определенную запись с таблици
delete from test; - удалить все записи
truncate test; - очистить табличку полностью
drop table test; - удалить табличку безвозвратно

Выбор данных из таблиц:

select * from  people; - выбрать все данные с табл.
select name, bio from people;
select id, name from people where id >= 2 and id < 4; - вывод указанных данных в табл.

where - опрератор с помощью которого табл можно проверять на любое условие
<> - не равно
and - оператор (и), который выводит данные с таблици учитывая все прописанные условия
or - оператор ( или), который выводит данные с табл учитывая или одно или второе или третье условие

select distinct name from people; - выбрать данные не повторяющиеся.
limit - устанавливаем лимит на кол-во выведенных записей
select * from current_dept_emp limit 1;

limit 2, 3 - первое значение говорит сколько эл в табл необходимо пропустить. Второе - сколько эл необходимо вывести.
order by - сортировать поыу. Всегда пишется после оператора where, если он есть в условии
order by id desk сортировка данных по айди в порядке убывания
between 5 and 8 - вывести данные между какими-то значениями
in(5,4,2,1) - вывести данные у которых айди именно указанные ранее
like 'Iv%' - выбрать записи у которых имя начинается на Ив, знак % - указывает, что не важно какие далее будут символы. %f% - в слове буква f где-то в середине. %А - ищем слова в которых буква А в конце.

Индексы - дополнительные характеристики к различным полям в табл.

create index Nindex on people(name); - ускоряет поиск в таблице по определенному полю если данных ооооочень много.

create table orders ( id int not null auto_increment, orderNumber int, shopId int, personId int, date_time datetime default current_timestamp, primary key(id), foreign key(shopID) references shop(id), foreign key(personID) references people(id) );
describe table_name - показать структуру табл.

default - значения по умолчанию. Поле автоматически заполняется
curent_timestamp -  по умолчанию будет заполняться время добавления новой записи

foreign key - внешний ключ
References tables name(id) - ссылка на данные в таблице

Обьеденение данных табл

insert into `orders` (`orderNumber`, `shopId, `personId`) values (0001, 2, 4), (0002, 4, 1), (0003, 2, 5), (0004, 3, 3), (0005, 1, 2), (0006, 1, 4);

 select orders.orderNumber, people.name, people.email from people inner join orders on people.id = orders.personId order by orders.orderNumber desc;

inner join - внутреннее объедененине табл. 

Вкомманде прописано: с ордерномер, имя и имейл с табл пипл объеденить данные с табл ордер где пипл айди = orders.personId и сортировать по orders.orderNumber по убыванию

select shop.title, people.name, people.email from people inner join order
s on people.id = orders.personId inner join shop on shop.id = orders.shopId order by orders.orderNumber desc;

select people.name, orders.ordernumber from people left join orders on people.id = orders.personId order by people.name desc;

select orders.date_time, people.name from orders right join people on orders.personId = people.id;

ПСЕВДОНИМЫ:

concat - обьеденить данные с разных полей или строк в одну табл

select concat('имя: ', name, '. День Рождения: ', birth) as 'information'
 from people;

 information                                         |
+-----------------------------------------------------+
| имя: Alex. День Рождения: 2050-04-04                |
| имя: Ivan. День Рождения: 2070-05-09                |
| имя: Luk. День Рождения: 2062-02-06                 |
| имя: Max. День Рождения: 2060-02-08                 |
| имя: Den. День Рождения: 2050-09-09         


select p.id, p.name, s.title, s.price from people as p, shop as s; выборка из нескольких таблиц

count - посчитать определенные значения в табл  
avg- выбрать среднее значение в табл
min- минимальное значение в табл
max- максимальное значение в табл
sum - посчитать опред данніе в таблице

select min(price) from shop;
select avg(price) from shop;


select lcase(title) from shop;
+--------------+
| lcase(title) |
+--------------+
| iphone       |
| tv           |
| fs4          |
| mac          | вывести данные в табл в нижнем регистре
| fridge       |
| iphone 7     |


select ucase(title) from shop;
+--------------+
| ucase(title) |
+--------------+
| IPHONE       |
| TV           |
| FS4          |
| MAC          | вывести данные в верхнем регистре
| FRIDGE       |
| IPHONE 7     |





"" - ЗНАЧИТ ЧИСТАЯ СТРОКА. НЕ НУЛЬ.

delete from tablesname where rowname = means; - удаление строки из таблици.
select * from... order by 3 desc - можно указівать просто номер калонки.
select distinct name from people; - выбрать уникальные имена с таблички. Таким образом можно выбирать любые уникальные записи.

Данные в колонки в sql можно умножать, вычитать, суммировать

 select *, orderNumber * personId from orders;
select *, orderNumber - personId from orders;

'1999-02-203' - даты в запросах писать в кавычках






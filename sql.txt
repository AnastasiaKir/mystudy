create database - создать бд
dropdatabase - удалить бд

Для создания бд через коммандную строку:

ssh ubuntu@138.2.136.191 - подключение к серверу mysql

sudo -i - становишься рутом

mysql -proot - зайти в mysql, залогиниться.

Constraint:
- primary key
- foreign key
- not null
- unique 

после создания бд
 show databases;
 use NameDB;

create table; - создать табл
auto_increment - столбец будет заполнятся автоматически на +1 (для id)
primery key (id) - записи в поле повторятся не будут

create table people( id int not null auto_increment, name varchar(30), email varchar(40), bio text, birth date, primary key(id) );

alter table name add имя поля varchar(32); - добавить в уже существующую табл. нужное поле

Хеш пароли обычно имеют 32 символа

поля  null - не сравниваются при вводе запросов. Пустота. Для поиска пустых значений, пример: select * from people where bio is null;
""- это пустая строка, но это значение.

null is null

union - соеденяет уникальные данные двух селектов. Повторяющихся данных в таблице не будет. Соеденяется по строкам.

union all - соеденяет данные двух селектов. При этом повторяющиеся данные в табл могут быть.

alias в where использовать нельзя

Только в блоке order by можно использовать alias столбца

where - накладывает ограничения на отбираемые данные

having - умеет формировать данные только уже с отобранных данных не используется без group by. Can be use only with select statement. Use after group by.


полная комманда запроса в бд -  select * from testdb.phone;
Тоесть необходимо ввести название бд после фром, если мы не перешли в нужную нам бд. С активной бд имя в запросе не используется.

Если название колонки имеет два слова записывать необходимо, пример `last name`

in (`mmm`, `dddd`) - используем когда нам необходимо перечислить значения в опреаторе where.

%A% - перед и после буквы любое кол-во символов
А%- после буквы любое кол-во символов
%А - слова которые заканчиваются на А

between - выбрать между. Оперрация включающаа.
select * from orders where shopId between 2 and 4; - покажет 2,3,4

ASC - данные по порядку
DESC - данные от большего к меньшему. используются с опреатором order by.

Внешний ключ для целостности данных!!!!! Foreign key
С помощью индекса можно быстрее получить данные!!!!! Для ускорения получения запросов!


forum-db.informatik.uni-tuebingen.de/c/ss20-asql - вопросы/ответы по sql

alter table name drop column имя поля; - удалить не нужное поле с табл

ДОБАВЛЕНИЕ И УДАЛЕНИЕ ЗАПИСЕЙ В ТАБЛ:

insert into people (name, bio, birth, email) values('Alex', 'Just programer', '2050-04-04', 'testmail.ru');

alter table people change birth birth date not null - изменить значения поля в табл.

insert into people (name, birth) values('Bob', '2070-05-09'); -  добавить значения в табл.

множественное добавление элементов - 

insert into people (name, email, birth)
           values ('Bob', 'tcldchb1.com', '2062-02-06'),
                  ('Max', 'tcldchb3.com', '2060-02-08'),
                  ('Luk', 'tcldchb2.com', '2050-09-09');
В случае если есть ограничения то есть логика для разрешения конфликта (insert into tablename (....,...)
                                                                         values (....,.....) 
                                                                         ro

обновить занчения в таблице в которой есть опред поле c данными:

update `people` set `name` = 'Ivan' where id = 2;

update `people` set `name` = 'Den', `email` = 'xhhnhxjs.com' where id > 4;


update `people` set `bio` = 'just new text' where name = 'Ivan' and id = 5;


create table test ( id int not null, sometext text, somefield varchar(36), primary key(id) );

delete from test where id = 2; - удалить определенную запись с таблици
delete from test; - удалить все записи
truncate test; - очистить табличку полностью
drop table test; - удалить табличку безвозвратно

Выбор данных из таблиц:

select * from  people; - выбрать все данные с табл.
select name, bio from people;
select id, name from people where id >= 2 and id < 4; - вывод указанных данных в табл.

where - опрератор с помощью которого табл можно проверять на любое условие
<> - не равно
and - оператор (и), который выводит данные с таблици учитывая все прописанные условия
or - оператор ( или), который выводит данные с табл учитывая или одно или второе или третье условие
in - Цруку

select distinct name from people; - выбрать данные не повторяющиеся.
limit - устанавливаем лимит на кол-во выведенных записей
select * from current_dept_emp limit 1;

limit 2, 3 - первое значение говорит сколько эл в табл необходимо пропустить. Второе - сколько эл необходимо вывести.
order by - сортировать поыу. Всегда пишется после оператора where, если он есть в условии
order by id desk сортировка данных по айди в порядке убывания
between 5 and 8 - вывести данные между какими-то значениями
in(5,4,2,1) - вывести данные у которых айди именно указанные ранее
like 'Iv%' - выбрать записи у которых имя начинается на Ив, знак % - указывает, что не важно какие далее будут символы. %f% - в слове буква f где-то в середине. %А - ищем слова в которых буква А в конце.

Индексы - дополнительные характеристики к различным полям в табл.

create index Nindex on people(name); - ускоряет поиск в таблице по определенному полю если данных ооооочень много.

create table orders ( id int not null auto_increment, orderNumber int, shopId int, personId int, date_time datetime default current_timestamp, primary key(id), foreign key(shopID) references shop(id), foreign key(personID) references people(id) );
describe table_name - показать структуру табл.

default - значения по умолчанию. Поле автоматически заполняется
curent_timestamp -  по умолчанию будет заполняться время добавления новой записи

Primary key - Each table in the database should have a PK defined.

foreign key - внешний ключ
References tables name(id) - ссылка на данные в таблице

Обьеденение данных табл

insert into `orders` (`orderNumber`, `shopId, `personId`) values (0001, 2, 4), (0002, 4, 1), (0003, 2, 5), (0004, 3, 3), (0005, 1, 2), (0006, 1, 4);

 select orders.orderNumber, people.name, people.email from people inner join orders on people.id = orders.personId order by orders.orderNumber desc;

inner join - внутреннее объедененине табл. 

Вкомманде прописано: с ордерномер, имя и имейл с табл пипл объеденить данные с табл ордер где пипл айди = orders.personId и сортировать по orders.orderNumber по убыванию

select shop.title, people.name, people.email from people inner join order
s on people.id = orders.personId inner join shop on shop.id = orders.shopId order by orders.orderNumber desc;

select people.name, orders.ordernumber from people left join orders on people.id = orders.personId order by people.name desc;

select orders.date_time, people.name from orders right join people on orders.personId = people.id;

ПСЕВДОНИМЫ:

concat - обьеденить данные с разных полей или строк в одну табл

select concat('имя: ', name, '. День Рождения: ', birth) as 'information'
 from people;

 information                                         |
+-----------------------------------------------------+
| имя: Alex. День Рождения: 2050-04-04                |
| имя: Ivan. День Рождения: 2070-05-09                |
| имя: Luk. День Рождения: 2062-02-06                 |
| имя: Max. День Рождения: 2060-02-08                 |
| имя: Den. День Рождения: 2050-09-09         


select p.id, p.name, s.title, s.price from people as p, shop as s; выборка из нескольких таблиц

count - посчитать определенные значения в табл  
avg- выбрать среднее значение в табл
min- минимальное значение в табл
max- максимальное значение в табл
sum - посчитать опред данніе в таблице

select min(price) from shop;
select avg(price) from shop;


select lcase(title) from shop;
+--------------+
| lcase(title) |
+--------------+
| iphone       |
| tv           |
| fs4          |
| mac          | вывести данные в табл в нижнем регистре
| fridge       |
| iphone 7     |


select ucase(title) from shop;
+--------------+
| ucase(title) |
+--------------+
| IPHONE       |
| TV           |
| FS4          |
| MAC          | вывести данные в верхнем регистре
| FRIDGE       |
| IPHONE 7     |





"" - ЗНАЧИТ ЧИСТАЯ СТРОКА. НЕ НУЛЬ.

delete from tablesname where rowname = means; - удаление строки из таблици.
select * from... order by 3 desc - можно указывать просто номер колонки.

select distinct name from people; - выбрать уникальные имена с таблички. Таким образом можно выбирать любые уникальные записи. Главное указывать по каким калонкам нужна уникальность.

Данные в колонки в sql можно умножать, вычитать, суммировать

 select *, orderNumber * personId from orders;
select *, orderNumber - personId from orders;

'1999-02-203' - даты в запросах писать в кавычках


проверка существование данных в табл.

select recname from table where exists (select 1 from table 2 where...)

not exists - проверка на не существующие данные

Селекты можно между собой обьеденять

select * from table1
 union all             Объеденяет вообще все данные табл. Union -                         показывает только унивальные записи
select * from table2


Агрегатные функции

select count(*) from salaries; подсчет кол-ва строк в таблице

select count(distinct имя столбца) from tables name - считает не нулевые значения

сОЕДЕНЕНИЯ В SQL:

- INNER JOIN 
- RIGHT JOIN
- LEFT JOIN
- FULL JOIN 
- CROSS JOIN - СОЕДЕНЕНИЕ ВСЕХ СО ВСЕМИ select * from people, shop;


кОММАНДЫ dml (DATA MANIPULATION LANGUAGE):

КОММАНДЫ МАНИПУЛЯЦИИ ДАННЫМИ

_ SELECT
- INSERT
- DELETE
- UPDATE

Transact-SQL - изучить


 create database leagua charset=utf8 collate utf8_general_ci;
 Создание бд которая принимает не только латиницу, а и другие символы.

типы данных:

char(..) - тип данных текстовый, в бд оставляет именно столько места сколько указано в скобках. Иногда это может быть не оптимально. Использовать лучше там где знаем точное кол-во символов.

varchar(..) - бд выделяет столько места сколько нужно для хранения текста.

int - числа от -2,147,483,648 ... 2,147,483,648
unsigned int - отрицательные числа в колонке не сохранятся
big int - оооочень большие числа

bool - принимает тру фолс значения
decimal(10, 4) - для чисел (деньги) xxxxx.yyy
float- числа с плавающей запитой (4байта)
date
time
datetime
timestamp
decimal - ? learn!!!!

primary key - означает уникальность колонки

describe tablename - описывает табл и какие типы данных в ней используются.

phone char(10) null unique -  сохранит лишь уникальные данные в табл
 
country char(3) default 'ru' - в таблице по умолчанию будет заполнятся поле страна, при этом в ручную мы можем заполняя табл написать другую страну, так с любыми данными

alter table player modify positio int; - изменяет записи в табл
update set position = 0 where playerid = 5; обновляет данные

alter table player add position varchar(20); - добавляем данные

alter table name table add foreign key (column name) references name table2 (name column from table 2) - создание внешнего ключа и ссылки на табл
primary key может ссылаться на primary key

foreign key ссылается только на праймери ки. Записи на которые ссылаются удалить не возможно.
show create table nametable; - посмотреть как создавалась табл
 
Можноописывать constraint для primary key

Каскадное удаление лучше не применять. С точки зрения производительности мы с экономим.


комманды selecta:

 - from
 - where
 - group by
 - having
 - order by
 - join
 - subquery and derived table
 - with
 - window function

select count(distinct(last_name)) as unique_cnt, count(*) as total_count from employees;
+------------+-------------+
| unique_cnt | total_count |
+------------+-------------+
|       1637 |      300024 |

Выбираем уникальные значение из таблицы - считаем их, а так же считаем общее кол-во данных столбца фамилия.

select last_name, count(*) as num_emp from employees group by last_name having count(*) > 150;

Для чистоты кода не нужно миксовать фильтры с джойнами
 join ..... on....
 where
таким образом написанный код легче проверять и закомментироватью

-- where .... - закомментированная строчка кода

ИНДЕКСЫ:

-КЛАСТЕРНЫЙ ИНДЕКС -PRIMERY  KEY -по которому данные в табл вставляются.
-Признак создания индекса это уникальность.
-Если нет индекса на foreign key
-до 10-ти индексов в табл, в которую относительно не часто вставляются данные, можно создавать

https://www.sqlshack.com/learn-sql-primary-key/ - articles sql

DDL (DATA DEFINITION LANGUAGE) - запросы sql - create, alter, drop, rename
DML (DATA MANIPULATION LANGUAGE) - select, insert,update.
DCL (DATA CONTROL LANGUAGE) - grant, revoke


ТРИГЕРЫ:

эТО хранимая процедура, которая не вызывается непосредственно, а используется при наступленнии определенного события.


delimiter//
create trigger InSumm 
on t1 
after insert, update, delete 
as 
begin 
insert into t2 values (1); 
end//

CREATE TRIGGER insumm BEFORE INSERT ON t1 SET @sum=1;

Создать тригер в таблице 1 после вставки, удаления, обновления в которой в таблицу 2 будет вставляться число 1.ф

FOR EACH ROW -ОПЕРАТОР ПОЗВОЛЯЕТ ВЫПОЛНЯТЬ КОД ТРИГГЕРА ДЛЯ КАЖДОЙ СТРОКИ

DECLARE @ - объявление переменных в sql

delimiter// - Delimiters can be used when you need to define the stored procedures, function as well as to create triggers. The default delimiter is semicolon.


Общий синтаксис для создания триггера MySQL показан в следующем примере:

DELIMITER //
CREATE TRIGGER [TRIGGER_NAME]
[TRIGGER TIME] [TRIGGER EVENT]
ON [TABLE]
FOR EACH ROW
[TRIGGER BODY]//
DELIMITER ;
Структура триггера включает:

DELIMITER //: разделитель MySQL по умолчанию — это (;). Его нужно заменить на что-то другое, для того, чтобы MySQL рассматривал следующие строки, как одну команду, пока не достигнет пользовательского разделителя. В данном примере в качестве разделителя используется //, а стандартный разделитель ; стоит в конце.

[TRIGGER_NAME]: триггер должен иметь имя, и вы можете указать его именно здесь.

[TRIGGER TIME]​​​: (BEFORE, AFTER) триггер может быть вызван в разные моменты времени. MySQL позволяет определить, когда запускать триггер — до или после операции с базой данных.

[TRIGGER EVENT]: триггеры могут быть вызваны только операциями INSERT, UPDATE и DELETE. Вы можете использовать любое из значений в зависимости от того, чего вы хотите достичь.

[TABLE]: любой триггер, который вы создаете в своей базе данных MySQL, должен быть связан с таблицей.

FOR EACH ROW: этот оператор позволяет MySQL выполнять код триггера для каждой строки, на которую влияет триггер.

[TRIGGER BODY]: код, который выполняется при вызове триггера, называется trigger body​​. Это может быть один SQL-оператор или несколько команд. Обратите внимание, если вы выполняете несколько SQL-операторов в теле триггера, вы должны заключить их в блок BEGIN... END.


Создание триггера BEFORE INSERT:

DELIMITER //
CREATE TRIGGER validate_sales_amount
BEFORE INSERT
ON sales
FOR EACH ROW
IF NEW.sales_amount>10000 THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'Sale has exceeded the allowed amount of 10000.';
END IF//
DELIMITER ;



Создание триггера After Insert:

DELIMITER //
CREATE TRIGGER customer_status_records
AFTER INSERT
ON customers
FOR EACH ROW
Insert into customer_status(customer_id, status_notes) VALUES(NEW.customer_id, 'ACCOUNT OPENED SUCCESSFULLY')//
DELIMITER ;
  

 Создание триггера After Update:

delimiter //
create trigger log_sales_updates
after update
on sales 
for each row
insert into audit_log(sales_id, previuos_amount, new_amount, updated_by, updated_on) values (NEW.sales_id,Old.sales_amount, NEW.sales_amount, (select user()), NOW() )//
delimiter;

 Создание триггера Before Delete:

delimiter //
create trigger validate_related_records
before delete
on customers
for each row
if OLD.customer_id in (select customer_id from sales) then
signal sqlstate '45000'
set message_text = 'The customer has a related sales record.';
end if//
delimiter;

Создание триггера After Delete:

delimiter //
create trigger delete_related_info
after delete
on sales
for each row
delete from customers where customer_id=OLD.customer_id;//

Как и любой другой объект базы данных, вы можете удалить триггеры с помощью команды DROP. Синтакс удаления триггера следующий:

Drop trigger [TRIGGER NAME];

STORED PROCEDURE (хранимая процедура):

объект базы данных, представляющий собой набор SQL-инструкций, который компилируется один раз и хранится на сервере.
Хранимые процедуры позволяют повысить производительность, расширяют возможности программирования и поддерживают функции безопасности данных.

пакет кода под именем, которое можно повторно использовать для очень частых или конфиденциальных задач

usually INSERT, UPDATE, DELETE

- обслуживание упрощено
- security

@ - переменная в sql при создании хранимой процедуры

CREATE PROCEDURE uspGETDATE @NumberofDays int
AS
SELECT GETDATA() - @NumberofDays

EXEC uspGETDATE 11

usp- user store procedure - используется в названии при создании хранимых процедур


ХРАНИМАЯ ПРОЦЕДУРА БЕЗ ПАРАМЕТРОВ:

+-------------+---------------+-------+
| customer_id | customer_name | level |
+-------------+---------------+-------+
|           1 | JOHN DOE      | VIP   |
|           3 | JOHN DOE      | VIP   |
|           4 | David Doe     | VIP   |
+-------------+---------------+-------+


delimiter //
create procedure newfilter1 ()
    begin
    select * from customers where customer_name like 'J%';
    end//

Вызвать процедуру

call newfilter1 ();

ХРАНИМАЯ ПРОЦЕДУРА С ОДНИМ ПАРАМЕТРОМ:

delimiter //
create procedure Rec2 (in Var1 varchar(50))
begin
select * from customers where customer_name = Var1;
end//

call Rec2 ('David Doe');


+-------------+---------------+-------+
| customer_id | customer_name | level |
+-------------+---------------+-------+
|           4 | David Doe     | VIP   |

ХРАНИМЫЕ ПРОЦЕДУРЫ С НЕСКОЛЬКИМИ ПАРАМЕТРАМИ:

delimiter //
create procedure New(in var1 varchar(50), in var2 varchar(50))
begin
select * from customers where
customer_name = var1 and
level = var2;
end//

call New ('JOHN DOE', 'VIP');

| customer_id | customer_name | level |
+-------------+---------------+-------+
|           1 | JOHN DOE      | VIP   |
|           3 | JOHN DOE      | VIP   |

Для хранимых процедур мы получаем параметры. Есть три типа параметров

* in используется только для входящих параметров
* out используется только для возвращаемого значения
* inout можно передать или использовать только как возвращаемое значение

удаление хранимой процедуры

drop procedure procedure_name;



alter table audt_log change column privios_amount(старое имя) previous_amount(новое имя) int(тип данных); - изменить имя поля в табл.


VIEW:

СОЗДАЕТСЯ ДЛЯ ПРОСМОТРА ИМЕННО НЕОБХОДИМЫХ ДАННЫХ ИЗ НУЖНОЙ ТАБЛИЦИ. Создается новая, но не полноценная таблица. View данных не хранит, каждый раз обращается к данным таблици.

create view (name) as
select data1, data2
from (table name)
where...(условие);

create view salary_4 as
select salaries, emp_no
from salaries
where salary = 40000 limit 15;


для того что вывести данные

select * from views_name

Transaction - группа последовательных запросов БД, которая должна выполнится как одно целое либо не выполниться вообще.

start transaction;


mysql> update salaries set salary  = salary + 10000 where emp_no = 10137;

если транзакция нам не нужна, то пишем rollback
если транзакцию необходимо сохранить - commit

так же можно создать savepoint name_point - для того чтоб можно было вернуться именно к этой точке изменений.

+--------+
| salary |
+--------+
|  40000 |
|  41426 |
|  45147 |
|  48625 |
|  49228 |
|  51404 |     1
|  53646 |
|  56202 |


update salaries set salary  = salary + 20000 where emp_no = 10098;

+--------+
| salary |
+--------+
|  60000 |
|  61426 |
|  65147 |
|  68625 |
|  69228 |
|  71404 |
|  73646 |    2
|  76202 |
+--------+

savepoint my_point;

update salaries set salary  = salary - 5000 where emp_no = 10098;

+--------+
| salary |
+--------+
|  55000 |
|  56426 |
|  60147 |
|  63625 |
|  64228 |
|  66404 |    3
|  68646 |
|  71202 |

rollback to savepoint my_point;

и получаем таблицу 2.

ЕЩЕ РАЗ ТИПЫ ДАННЫХ:

INTEGER - целые числа 

Number(p,s) - дробные числа в которых (р - это кол0во цифр до запятой и s - количество цифр после запятой) всего цифр у числа может быть цифр р-s.

varchar(size) - размер текстового поля

DATE - 11-SEP-19 23:17:18 - содержит инф о годе, месяце, дне, часе, сек, мин

TIMESTAMP(F) - инф о годе, месяце, дне, часе, минуте, секунде, долях сек.

Еще раз DISTINCT

SELECT DISTINCT NAME FROM TABLENAME - ИЗВЛЕЧЬ УНИКАЛЬНЫЕ ДАННЫЕ ИЗ СТОЛБЦА                                       NAME В ТАБЛ TABLENAME.

CONCAT || - объединение данных в столбцах

проверить есть ли в моей бд таблица dual в которой одна строка, что удобно для расчетов

для вывода текста в dual таблице
select q'<  >' from ...

если в селекте мы ищем необходимые значения буквенного типа, то используем оператор like

select * from ... where .... like 'Na/_Suk' eskape '_'

/ - после наклонной следующий символ воспринимается как он есть _

_ - символ который воспринимается как специальный и может означать одну букву

если нужно посмотреть тип данных в таблице, а именно какого-либо столбца

desc имя столбца.

если в столбце данные имеют какой либо отступ типа А Сук, то в поиске пишем where name like'A_Сук'

если сравнивать данные или нужно найти данные в которых опред столбец имеет данные нал, то  select ....... where .... is null, только так!

AND - ОПЕРАТОР С ПОМОЩЬЮ КОТОРОГО МОЖНО ОБЪЕДЕНЯТЬ УСЛОВИЯ. В ответе получим, то что удовлетворяет все условия

OR - в ответе получим то, что удовлетворяет хоть одно из условий

NOT - select......from... where not (условие) или not like, not in, not between

функции:

Single row - сколько данных ввели, столько и получили на выходе

character functions:
LOWER(ПАРАМЕТР) - работает с текстовыми значениями, вывод значений будут именно маленькими буквами.

select lower(2+2*2) from dual;
+--------------+
| lower(2+2*2) |
+--------------+
| 6            |

 select lower('Privet '||'Skolko tebe let? '||'28') from dual;

UPPER(parameter) - выводится текст большими буквами.

INITCAP- пЕРВАЯ БУКВА ЗАГЛАВНАЯ ВСЕ ОСТАЛЬНЫЕ СТРОЧНЫЕ.

select concat ('privet, ', 'drug') from dual;
+-----------------------------+
| concat ('privet, ', 'drug') |
+-----------------------------+
| privet, drug                |

select concat ('today is  ', 'sysdate') from dual;
+----------------------------------+
| concat ('today is  ', 'sysdate') |
+----------------------------------+
| today is  28.06.22               |

select length ( 'Nastysha' ) from dual;
+-----------------------+
| length ( 'Nastysha' ) |
+-----------------------+
|                     8 |

length - показывает количество символов в строке.

sysdate - показывает сегодняшнюю дату в оракл дб

Multiple row - ввели данных много, на выходе получаем сумму этих данных
















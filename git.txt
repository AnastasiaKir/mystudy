Remote reposetory -  удаленное хранилище версий
Клонирование происходит версий всего проекта.

GitHub, GitLab, AWS CodeCommit, Bitbucket.

Есть книга на сайте гит по гит. Pro Git

Установка Git на Linux and Ubuntu

sudo apt-get install git

git -- version - какая версия гита установилась.

На винду:
Устанавливаем через сайт гит.
sudo yun install git.
 На сайте гит есть спиcок комманд как установить гит на разные версии Линукса.

GIT CONFIG --GLOBAL USER.NAME "YOUR NAME"  - В ГИТЕ ПИШЕТСЯ НАСТОЯЩЕЕ ИМЯ ДЛЯ ТОГО ЧТОБ МОЖНО БЫЛО ОТСЛЕЖИВАТЬ КЕМ БЫЛА ПРОДЕЛАНА РАБОТА

GIT CONFIG --GLOBAL USER.EMAIL "YOUR EMAIL" - ваш имейл. Включаются в ваш коммит



Git config -l - конфигурация имя и имейл

Работа с локальными копиями:

ll - смотреть что есть внутри директории

GIT INIT . - создание БД в директории в которой находишься
LL .GIT/ - ПОСМОТРЕТЬ ЧТО ЕСТЬ В ДИРЕКТОРИИ
GIT STATUS - показывает статус того что происходит в гит.

echo "text" > file1.txt - изменили файл и добавили в него текст

1) Сделать снимок GIT ADD * - ШАГ МЕЖДУ ТЕМ ЧТОБ ФАЙЛЫ МОЖНО БЫЛО ЗАКОМИТИТЬ. * - Значит все файлы. Либо пишем имя файла.
2) git commit -m "Versia commita 1"- закомители все файлы. Все новые версии файлов.

стадии файлов:

Только созданный файл со стороны гита в статусе - untracked
git add file.txt - Staged
git commit -m "Versia commita 1" - COPY IN LOKAL REPOSITORY
GIT PUSH - отправляет копию файла с local repository в remote repository

Git log - история всех коммитов (-1, 2,3) - если нужно посмотреть последние изменение в 1 или 2 или 3х файлах
Git log -1 -р - посмотреть именно какие были последние изменения (р-print)
Git checkout -- filename - убрать файл с ненужными или не правильными изменениями.
Git diff -- staged - показывает разницу между тем что есть и тем что хотите добавить.
.gitignore - в текстовом документе прописываются файлы которые необходимо игнорировать (*.log - пример)

Управление версиями файлов:

1) Git Clone https://github.com/AnastasiaKir/project18.git - клонирование проекта. Это делают только один раз.
2) Заходим в этот проект коммандой CD
3) Git push origin - изменения отправить в интернет.
4) Ввести ваше имя пользователя и пароль. Либо необходимо создать токен.

Создание ключа:

1)ssh-keygen

2) ll ~/.ssh/

3) cat ~/.ssh/id_rsa.pub - копируем публичный ключ

git remote -v - посмотреть ссылки
git remote set-url origin git@github.com:AnastasiaKir/project18.git - изменить протокол https:// на git@github.com, чтоб при push не запрашивал гит ввести пароли и имя пользователя.


УСТАНОВКА ЛОГИНА ГИТХАБ ЧЕРЕ ССШ НА ВИНДОВС:

1) Установить программу гитбаш
2) ssh-keygen

Создание и работа с branch:

Master branch - золотая копия программы которая должна работать всегда. Коммиты никогда не делаются в мастер бренч.

Редактировать мастер код не нужно, для этого создается отдельная ветка ( копия программы для исправления ошибок и тд).

git branch имя бранч- создание ветки
git branch - просмотреть на какой ветке находишся
git checkout branches name - перейти на ветку с именем
git checkout -b branches name - создание новой ветки и сразу переход на нее
Для того чтоб добавить изменениея в ветке мастер нужно на нее перейти.
git merge branches name - добавить изменения в ветку мастер
git branch - d branches name - удалить ветку с определенным названием после добавленных изменений
git branch -D - если нужно удалить бренч в котором был произведен коммит


ПЕРЕХОД НА СТАРЫЕ ВЕРСИИ:

перейти на любую из версий коммита 1) git log - список последних коммитов
                                   2) git checkout                                69195314524e48b52bd6d721dfd86bbc834fd5f2 - (копируем как бы всю ссылку на коммит) - перейти на нужную версию коммита.

изменить старый коммит:

git commit --amend - пишем изменения и дальше работаем как с редактором vim.

 git log --all --decorate --oneline --graph - проверить ветки
 
git reset --hard HEAD~2 - удалить 2 новых коммита. После ~ любое число значит количество коммитов

git reset --soft HEAD~3 - удалить ненужные коммиты при этом новые изменения не удаляются.

git push --set-upstream origin branches name - запушить новую ветку в гитхаб чтоб можно было делать в ней изменения.
git push origin --delete branches name - удалить ветку удаленно






 












